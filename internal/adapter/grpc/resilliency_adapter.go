package grpc

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/fajaramaulana/go-grpc-micro-bank-proto/protogen/go/resilliency"
	domainResl "github.com/fajaramaulana/go-grpc-micro-bank-server/internal/application/domain/resilliency"
	"github.com/rs/zerolog/log"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func generateErrStatus(statusCode uint32) error {
	str := "Generated by server"

	if sc, ok := domainResl.StatusCodeMap[statusCode]; ok && sc == codes.OK {
		return nil
	}

	if sc, ok := domainResl.StatusCodeMap[statusCode]; ok {
		return status.New(sc, str).Err()
	} else {
		return status.New(codes.Internal, str).Err()
	}
}

func (a *GrpcAdapter) Unaryresilliency(ctx context.Context, req *resilliency.ResilliencyRequest) (*resilliency.ResilliencyResponse, error) {
	log.Info().Msg("UnaryResilliency invoked")
	str, status := a.resilliencyService.GenerateResilliency(req.MinDelaySecond, req.MaxDelaySecond, req.StatusCodes)

	if errStatus := generateErrStatus(status); errStatus != nil {
		return nil, errStatus
	}

	return &resilliency.ResilliencyResponse{
		DummyString: str,
	}, nil
}

func (a *GrpcAdapter) ServerStreamingResilliency(req *resilliency.ResilliencyRequest, stream grpc.ServerStreamingServer[resilliency.ResilliencyResponse]) error {
	log.Info().Msg("ServerStreamingResilliency invoked")

	context := stream.Context()

	for {
		select {
		case <-context.Done():
			log.Info().Msg("ServerStreamingResilliency - Client cancelled the request")
		default:
			str, status := a.resilliencyService.GenerateResilliency(req.MinDelaySecond, req.MaxDelaySecond, req.StatusCodes)

			if errStatus := generateErrStatus(status); errStatus != nil {
				return errStatus
			}

			stream.Send(&resilliency.ResilliencyResponse{
				DummyString: str,
			})
		}
	}
}
func (a *GrpcAdapter) ClientStreamingResilliency(stream grpc.ClientStreamingServer[resilliency.ResilliencyRequest, resilliency.ResilliencyResponse]) error {
	log.Info().Msg("ClientStreamingResilliency invoked")

	i := 0

	for {
		req, err := stream.Recv()

		if err == io.EOF {
			log.Info().Msg("ClientStreamingResilliency - Client closed the connection")
			res := resilliency.ResilliencyResponse{
				DummyString: fmt.Sprintf("Received %v requests from client", strconv.Itoa(i)),
			}

			return stream.SendAndClose(&res)
		}

		if err != nil {
			return err
		}

		if req != nil {
			_, sts := a.resilliencyService.GenerateResilliency(req.MinDelaySecond, req.MaxDelaySecond, req.StatusCodes)

			if errStatus := generateErrStatus(sts); errStatus != nil {
				return errStatus
			}
		}

		i++
	}
}
func (a *GrpcAdapter) BidirectionalStreamingResilliency(stream grpc.BidiStreamingServer[resilliency.ResilliencyRequest, resilliency.ResilliencyResponse]) error {
	log.Info().Msg("BidirectionalStreamingResilliency invoked")

	ctx := stream.Context()

	for {
		select {
		case <-ctx.Done():
			log.Info().Msg("BidirectionalStreamingResilliency - Client cancelled the request")
			return nil
		default:
			req, err := stream.Recv()
			if err == io.EOF {
				log.Info().Msg("BidirectionalStreamingResilliency - Client closed the connection")
				return nil
			}

			if err != nil {
				log.Fatal().Err(err).Msg("BidirectionalStreamingResilliency - Error while receiving request")
			}

			str, status := a.resilliencyService.GenerateResilliency(req.MinDelaySecond, req.MaxDelaySecond, req.StatusCodes)

			if errStatus := generateErrStatus(status); errStatus != nil {
				return errStatus
			}

			err = stream.Send(&resilliency.ResilliencyResponse{
				DummyString: str,
			})

			if err != nil {
				log.Fatal().Err(err).Msg("BidirectionalStreamingResilliency - Error while sending response")
			}
		}
	}
}
